{"version":3,"sources":["components/TodoListTask.js","components/TodoListTasks.js","components/TodoListFooter.js","components/TodoListTitle.js","components/addNewItemForm/AddNewItemForm.js","api/api.js","redux/reducer.js","components/todolist/TodoList.js","App.js","serviceWorker.js","redux/store.js","index.js","components/addNewItemForm/AddNewItemForm.module.css"],"names":["TodoListTask","state","editMode","title","_this","props","task","onIsDoneChanged","e","status","currentTarget","checked","changeStatus","id","onTitleChanged","setState","value","activateEditMode","deactivateEditMode","changeTitle","onDeleteTask","deleteTask","render","containerCssClass","isDone","priority","react_default","a","createElement","className","type","onChange","onBlur","autoFocus","onClick","React","Component","TodoListTasks","tasksElements","tasks","map","components_TodoListTask","key","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTitle","updateTitle","Fragment","AddNewItemForm","error","onAddItemClick","newText","addItem","onKeyPress","styles","wrapper","newTodolist","classNameForInput","placeholder","buttonsColl","customBtn","btn9","instance","axios","create","baseURL","withCredentials","headers","API-KEY","api","get","post","todolistId","delete","concat","put","newTaskTitle","taskId","initialState","todolists","reducer","arguments","length","undefined","action","_objectSpread","tl","Object","toConsumableArray","filter","t","newTask","obj","TodoList","restoreState","setTasks","addTask","newFilterValue","changeTask","TodoList_objectSpread","find","updateTask","deleteTodolist","updateTodolistTitle","_this$props$tasks","components_TodoListTitle","addNewItemForm_AddNewItemForm","components_TodoListTasks","components_TodoListFooter","this","ConnectedTodolist","connect","dispatch","then","res","data","items","catch","item","updateTaskSuccess","deleteTodolistSuccess","deleteTaskSuccess","updateTodolistTitleSuccess","App","setTodolists","addTodoList","addTodolist","todolist_TodoList","ConnectedApp","getState","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","thunk","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.cc7bda6c.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\n\nclass TodoListTask extends React.Component {\n\n    state = {\n        editMode: false,\n        title: this.props.task.title\n    };\n\n    onIsDoneChanged = (e) => {\n        let status = e.currentTarget.checked ? 2 : 0;\n        this.props.changeStatus(this.props.task.id, status);\n    };\n\n    onTitleChanged = (e) => {\n        this.setState({title: e.currentTarget.value});\n    };\n\n    activateEditMode = () => {\n        this.setState({editMode: true});\n    };\n\n    deactivateEditMode= () => {\n        this.props.changeTitle(this.props.task.id, this.state.title);\n        this.setState({editMode: false});\n    };\n    onDeleteTask = () => {\n        this.props.deleteTask(this.props.task.id);\n    };\n    render = () => {\n        let containerCssClass = this.props.task.isDone ? \"todoList-task done\" : \"todoList-task\";\n        let priotityTitle = \"\";\n        switch (this.props.task.priority) {\n            case 0: priotityTitle = \"Low\"; break;\n            case 1: priotityTitle = \"Middle\"; break;\n            case 2: priotityTitle = \"High\"; break;\n            case 3: priotityTitle = \"Urgently\"; break;\n            case 4: priotityTitle = \"Later\"; break;\n        }\n        return (\n                <div className={containerCssClass}>\n                    <input type=\"checkbox\" checked={this.props.task.status === 2}\n                           onChange={this.onIsDoneChanged}/>\n                    { this.state.editMode\n                        ? <input onBlur={this.deactivateEditMode} onChange={this.onTitleChanged} autoFocus={true}\n                                 value={this.state.title} />\n                        : <span onClick={this.activateEditMode}>{this.props.task.title}</span>\n                    } <button onClick={this.onDeleteTask}>X</button>\n                </div>\n        );\n    }\n}\n\nexport default TodoListTask;\n\n","import React from 'react';\nimport '../App.css';\nimport TodoListTask from \"./TodoListTask\";\n\nclass TodoListTasks extends React.Component {\n    render = () => {\n\n        let tasksElements = this.props.tasks.map(task => {\n            return <TodoListTask task={task}\n                                 key={task.id}\n                                 changeStatus={this.props.changeStatus}\n                                 changeTitle={this.props.changeTitle}\n                                 deleteTask={this.props.deleteTask}\n            />\n        });\n\n        return (\n            <div className=\"todoList-tasks\">\n                {tasksElements}\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n\n","import React from 'react';\nimport '../App.css';\n\nclass TodoListFooter extends React.Component {\n\n    state = {\n        isHidden: false\n    };\n\n    onAllFilterClick = () => { this.props.changeFilter(\"All\"); };\n    onCompletedFilterClick = () => { this.props.changeFilter(\"Completed\"); };\n    onActiveFilterClick = () => { this.props.changeFilter(\"Active\"); };\n    onShowFiltersClick = () => { this.setState({isHidden: true}) };\n    onHideFiltersClick = () => { this.setState({isHidden: false}) };\n\n    render = () => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\n\n        return (\n            <div className=\"todoList-footer\">\n                { !this.state.isHidden && <div>\n                     <button onClick={ this.onAllFilterClick } className={classForAll}>All</button>\n                     <button onClick={ this.onCompletedFilterClick } className={classForCompleted}>Completed</button>\n                     <button onClick={ this.onActiveFilterClick } className={classForActive}>Active</button>\n                  </div>\n                }\n                { !this.state.isHidden && <span onClick={ this.onShowFiltersClick }>hide</span> }\n                { this.state.isHidden && <span onClick={ this.onHideFiltersClick }>show</span> }\n            </div>\n        );\n    }\n}\n\nexport default TodoListFooter;\n\n","import React from 'react';\nimport './todolist/Todolist.css';\n\nclass TodoListTitle extends React.Component {\n\n    state = {\n        editMode: false,\n        title: this.props.title\n    };\n\n    onTitleChanged = (e) => {\n        this.setState({title: e.currentTarget.value});\n    };\n\n    deactivateEditMode = () => {\n        this.setState({editMode: false});\n        this.props.updateTitle(this.state.title);\n    };\n\n    activateEditMode = () => {\n        this.setState({editMode: true});\n    };\n\n    render = () => {\n        return (\n            <>\n                {\n                    this.state.editMode\n                        ? <input value={this.state.title}\n                                 autoFocus={true}\n                                 onBlur={this.deactivateEditMode}\n                                 onChange={this.onTitleChanged}\n                        />\n                        : <h3 className=\"todoList-header__title\" onClick={this.activateEditMode}>{this.props.title}</h3>\n                }\n            </>\n        );\n    }\n}\n\nexport default TodoListTitle;\n\n","import React from 'react';\nimport styles from './AddNewItemForm.module.css'\n\nclass AddNewItemForm extends React.Component {\n\n    state = {\n        error: false,\n        title: \"\"\n    };\n\n    onAddItemClick = () => {\n        let newText = this.state.title;\n        this.setState({title: \"\"});\n\n        if (newText === \"\") {\n            this.setState({error: true});\n        } else {\n            this.setState({error: false});\n            // передаём новый текст наружу\n            this.props.addItem(newText);\n        }\n    };\n\n    onTitleChanged = (e) => {\n        this.setState({\n            error: false,\n            title: e.currentTarget.value\n        });\n    };\n\n    onKeyPress = (e) => {\n        if (e.key === \"Enter\") {\n            this.onAddItemClick();\n        }\n    };\n\n    render = () => {\n        let classNameForInput = this.state.error ? \"error\" : \"\";\n\n        return (\n            <div className={styles.wrapper}>\n                <div className={styles.newTodolist}>\n                    <input className={styles.classNameForInput}\n                           type=\"text\"\n                           placeholder=\"New item name\"\n                           onChange={this.onTitleChanged}\n                           onKeyPress={this.onKeyPress}\n                           value={this.state.title}\n                    />\n                    <div className={styles.buttonsColl}>\n                        <div className={styles.customBtn}>\n                            <button className={styles.btn9} onClick={this.onAddItemClick}>Add</button>\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default AddNewItemForm;\n\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/todo-lists\",\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"6827c2e6-7737-44e7-8d82-87e21bdec453\"}\r\n});\r\n\r\nexport const api = {\r\n    getTodolists() {\r\n        return instance.get(\"\");\r\n    },\r\n    createTodolist(title) {\r\n        return instance.post(\"\", {title})\r\n    },\r\n    deleteTodolist(todolistId) {\r\n        return instance.delete(`/${todolistId}` )\r\n    },\r\n    updateTodolistTitle(title, todolistId) {\r\n        return instance.put(`/${todolistId}`, {title: title})\r\n    },\r\n    getTasks(todolistId) {\r\n        return instance.get(`/${todolistId}/tasks`)\r\n    },\r\n    createTask(newTaskTitle, todolistId) {\r\n        return instance.post(`/${todolistId}/tasks`, {title: newTaskTitle});\r\n    },\r\n    updateTask(taskId, todolistId, task) {\r\n        return instance.put(`/${todolistId}/tasks/${taskId}`,  task);\r\n    },\r\n    deleteTask(taskId, todolistId) {\r\n        return instance.delete(`/${todolistId}/tasks/${taskId}`)\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n","import {api} from \"../api/api\";\r\n\r\nexport const ADD_TODOLIST_SUCCESS = \"TodoList/Reducer/ADD-ADD_TODOLIST_SUCCESS\";\r\nexport const ADD_TODOLIST_ERROR = \"TodoList/Reducer/ADD_TODOLIST_ERROR\";\r\nexport const SET_TODOLISTS_SUCCESS = \"TodoList/Reducer/SET_TODOLISTS_SUCCESS\";\r\nexport const SET_TODOLISTS_ERROR = \"TodoList/Reducer/SET_TODOLISTS_ERROR\";\r\nexport const SET_TASKS_SUCCESS = \"TodoList/Reducer/SET_TASKS_SUCCESS\";\r\nexport const SET_TASKS_ERROR = \"TodoList/Reducer/SET_TASKS_ERROR\";\r\nexport const DELETE_TODOLIST_SUCCESS = \"TodoList/Reducer/DELETE_TODOLIST_SUCCESS\";\r\nexport const DELETE_TODOLIST_ERROR = \"TodoList/Reducer/DELETE_TODOLIST_ERROR\";\r\nexport const DELETE_TASK_SUCCESS = \"TodoList/Reducer/DELETE_TASK_SUCCESS\";\r\nexport const DELETE_TASK_ERROR = \"TodoList/Reducer/DELETE_TASK_ERROR\";\r\nexport const UPDATE_TODOLIST_TITLE_SUCCESS = \"TodoList/Reducer/UPDATE_TODOLIST_TITLE_SUCCESS\";\r\nexport const UPDATE_TODOLIST_TITLE_ERROR = \"TodoList/Reducer/UPDATE_TODOLIST_TITLE_ERROR\";\r\nexport const ADD_TASK_SUCCESS = \"TodoList/Reducer/ADD_TASK_SUCCESS\";\r\nexport const ADD_TASK_ERROR = \"TodoList/Reducer/ADD_TASK_ERROR\";\r\nexport const UPDATE_TASK_SUCCESS = \"TodoList/Reducer/UPDATE_TASK_SUCCESS\";\r\nexport const UPDATE_TASK_ERROR = \"TodoList/Reducer/UPDATE_TASK_ERROR\";\r\n\r\n\r\nconst initialState = {\r\n    todolists: []\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_TODOLISTS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map(tl => ({...tl, tasks: []}))\r\n            };\r\n        case SET_TODOLISTS_ERROR:\r\n            return {\r\n                ...state, error: \"error\"\r\n            };\r\n        case ADD_TODOLIST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: [action.newTodolist, ...state.todolists]\r\n            };\r\n        case ADD_TODOLIST_ERROR:\r\n            return {\r\n                ...state, error: \"error\"\r\n            };\r\n        case SET_TASKS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id !== action.todolistId) {\r\n                        return tl;\r\n                    } else {\r\n                        return {...tl, tasks: action.tasks}\r\n                    }\r\n                })\r\n            };\r\n        case SET_TASKS_ERROR:\r\n            return {\r\n                ...state, error: \"error\"\r\n            };\r\n        case DELETE_TODOLIST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(tl => tl.id !== action.todolistId)\r\n            };\r\n        case DELETE_TODOLIST_ERROR:\r\n            return {\r\n                ...state, error: \"error\"\r\n            };\r\n        case UPDATE_TODOLIST_TITLE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id !== action.todolistId) return tl;\r\n                    else return {...tl, title: action.title}\r\n                })\r\n            };\r\n        case UPDATE_TODOLIST_TITLE_ERROR:\r\n            return {\r\n                ...state, error: \"error\"\r\n            };\r\n        case DELETE_TASK_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.filter(t => t.id !== action.taskId)\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            };\r\n        case DELETE_TASK_ERROR:\r\n            return {\r\n                ...state, error: \"error\"\r\n            };\r\n        case ADD_TASK_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: [action.newTask, ...tl.tasks]}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            };\r\n        case ADD_TASK_ERROR:\r\n            return {\r\n                ...state, error: \"error\"\r\n            };\r\n        case UPDATE_TASK_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.map(t => {\r\n                                if (t.id !== action.taskId) {\r\n                                    return t;\r\n                                } else {\r\n                                    return {...t, ...action.obj};\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            };\r\n        case UPDATE_TASK_ERROR:\r\n            return {\r\n                ...state, error: \"error\"\r\n            };\r\n\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n\r\n// Action creators\r\nexport const updateTaskSuccess = (taskId, obj, todolistId) => ({type: UPDATE_TASK_SUCCESS, taskId, obj, todolistId});\r\nexport const updateTaskError = () => ({type: UPDATE_TASK_ERROR});\r\nexport const deleteTodolistSuccess = (todolistId) => ({type: DELETE_TODOLIST_SUCCESS, todolistId: todolistId});\r\nexport const deleteTodolistError = () => ({type: DELETE_TODOLIST_ERROR});\r\nexport const deleteTaskSuccess = (taskId, todolistId) => ({type: DELETE_TASK_SUCCESS, taskId, todolistId});\r\nexport const deleteTaskError = () => ({type: DELETE_TASK_ERROR});\r\nexport const updateTodolistTitleSuccess = (title, todolistId) => ({type: UPDATE_TODOLIST_TITLE_SUCCESS, title, todolistId});\r\nexport const updateTodolistTitleError = () => ({type: UPDATE_TODOLIST_TITLE_ERROR});\r\nexport const addTaskSuccess = (newTask, todolistId) => ({type: ADD_TASK_SUCCESS, newTask, todolistId});\r\nexport const addTaskError = () => ({type: ADD_TASK_ERROR});\r\nexport const setTasksSuccess = (tasks, todolistId) => ({type: SET_TASKS_SUCCESS, tasks, todolistId});\r\nexport const setTasksError = () => ({type: SET_TASKS_ERROR});\r\nexport const addTodolistSuccess = (newTodolist) => ({type: ADD_TODOLIST_SUCCESS, newTodolist});\r\nexport const addTodolistError = () => ({type: ADD_TODOLIST_ERROR});\r\nexport const setTodolistsSuccess = (todolists) => ({type: SET_TODOLISTS_SUCCESS, todolists});\r\nexport const setTodolistsError = () => ({type: SET_TODOLISTS_ERROR});\r\n\r\n//Thunk\r\nexport const setTodolists = () => (dispatch, getState) => {\r\n    api.getTodolists()\r\n        .then(res => {\r\n        dispatch(setTodolistsSuccess(res.data))\r\n    })\r\n        .catch((error) => {\r\n            dispatch(setTodolistsError(error))\r\n        })\r\n};\r\nexport const addTodolist = (title) => (dispatch) => {\r\n    api.createTodolist(title)\r\n        .then(res => {\r\n            dispatch(addTodolistSuccess(res.data.data.item));\r\n        })\r\n        .catch((error) => {\r\n            dispatch(addTodolistError(error))\r\n        })\r\n};\r\nexport const setTasks = (taskId) => (dispatch) => {\r\n    api.getTasks(taskId)\r\n        .then(res => {\r\n            dispatch(setTasksSuccess(res.data.items, taskId));\r\n        })\r\n        .catch((error) => {\r\n            dispatch(setTasksError(error))\r\n        })\r\n};\r\nexport const addTask = (newText, taskId) => (dispatch) => {\r\n    api.createTask(newText, taskId)\r\n        .then(res => {\r\n        dispatch(addTaskSuccess(res.data.data.item, taskId))\r\n    })\r\n        .catch((error) => {\r\n            dispatch(addTaskError(error))\r\n        })\r\n};\r\nexport const updateTask = (taskId, obj, todolistId, task) => (dispatch) => {\r\n\r\n    api.updateTask(taskId, todolistId, task)\r\n        .then(res => {\r\n            dispatch(updateTaskSuccess(taskId, obj, todolistId))\r\n        })\r\n        .catch((error) => {\r\n            dispatch(updateTaskError(error))\r\n        })\r\n};\r\nexport const deleteTodolist = (todolistId) => (dispatch) => {\r\n    api.deleteTodolist(todolistId)\r\n        .then(res => {\r\n            dispatch(deleteTodolistSuccess(todolistId))\r\n        })\r\n        .catch((error) => {\r\n            dispatch(deleteTodolistError(error))\r\n        })\r\n};\r\nexport const deleteTask = (taskId, todolistId) => (dispatch) => {\r\n    api.deleteTask(taskId, todolistId)\r\n        .then(res => {\r\n            dispatch(deleteTaskSuccess(taskId, todolistId))\r\n        })\r\n        .catch((error) => {\r\n            dispatch(deleteTaskError(error))\r\n        })\r\n};\r\nexport const updateTodolistTitle = (title, todolistId) => (dispatch) => {\r\n    api.updateTodolistTitle(title, todolistId)\r\n        .then(res => {\r\n                dispatch(updateTodolistTitleSuccess(title, todolistId))\r\n        })\r\n        .catch((error) => {\r\n            dispatch(updateTodolistTitleError(error))\r\n        })\r\n};\r\n\r\n","import React from 'react';\nimport './Todolist.css';\nimport TodoListTasks from \".././TodoListTasks\";\nimport TodoListFooter from \".././TodoListFooter\";\nimport TodoListTitle from \".././TodoListTitle\";\nimport AddNewItemForm from \".././addNewItemForm/AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {\n    addTask, deleteTask, deleteTodolist,\n    setTasks, updateTask, updateTodolistTitle\n} from \"../../redux/reducer\";\n\nclass TodoList extends React.Component {\n\n    state = {\n        filterValue: \"All\"\n    };\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    restoreState = () => {\n        this.props.setTasks(this.props.id)\n    };\n\n    addTask = (newText) => {\n        this.props.addTask(newText, this.props.id)\n    };\n\n    changeFilter = (newFilterValue) => {\n        this.setState({\n            filterValue: newFilterValue\n        });\n    };\n\n    changeTask = (taskId, obj) => {\n        let changedTask = this.props.tasks.find(task => {\n            return task.id === taskId\n        });\n        let task = {...changedTask, ...obj};\n\n        this.props.updateTask(taskId, obj, this.props.id, task)\n    };\n\n    changeStatus = (taskId, status) => {\n        this.changeTask(taskId, {status: status});\n    };\n\n    changeTitle = (taskId, title) => {\n        this.changeTask(taskId, {title: title});\n    };\n\n    deleteTodolist = () => {\n       this.props.deleteTodolist(this.props.id)\n    };\n\n    deleteTask = (taskId) => {\n        this.props.deleteTask(taskId, this.props.id)\n    };\n\n    updateTitle = (title) => {\n        this.props.updateTodolistTitle(title, this.props.id)\n    };\n\n    render = () => {\n        let {tasks = []} = this.props;\n        return (\n            <div className=\"todoList\">\n                <div className=\"todoList-header\">\n                    <div className=\"wrapper\">\n                        <TodoListTitle title={this.props.title} updateTitle={this.updateTitle}/>\n                        <button onClick={this.deleteTodolist}>X</button>\n                    </div>\n                    <AddNewItemForm addItem={this.addTask}/>\n                </div>\n\n                <TodoListTasks changeStatus={this.changeStatus}\n                               changeTitle={this.changeTitle}\n                               deleteTask={this.deleteTask}\n                               tasks={tasks.filter(t => {\n                                   if (this.state.filterValue === \"All\") {\n                                       return true;\n                                   }\n                                   if (this.state.filterValue === \"Active\") {\n                                       return t.status === 0;\n                                   }\n                                   if (this.state.filterValue === \"Completed\") {\n                                       return t.status === 2;\n                                   }\n                               })}/>\n                <TodoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue}/>\n            </div>\n        );\n    }\n}\n\n// const mapDispatchToProps = (dispatch) => {\n//     return {\n//         addTask(newTask, todolistId) {\n//             dispatch(addTaskAC(newTask, todolistId));\n//         },\n//         setTasks(tasks, todolistId) {\n//             dispatch(setTasksAC(tasks, todolistId));\n//         },\n//         updateTask(taskId, obj, todolistId) {\n//             const action = updateTaskAC(taskId, obj, todolistId);\n//             dispatch(action);\n//         },\n//         deleteTodolist: (todolistId) => {\n//             const action = deleteTodolistAC(todolistId);\n//             dispatch(action)\n//         },\n//         deleteTask: (taskId, todolistId) => {\n//             const action = deleteTaskAC(todolistId, taskId);\n//             dispatch(action)\n//         },\n//         updateTodolistTitle: (title, todolistId) => {\n//             const action = updateTodolistTitleAC(todolistId, title);\n//             dispatch(action)\n//         }\n//     }\n// };\n\nconst ConnectedTodolist = connect(null, {setTasks, addTask, updateTask, deleteTodolist, deleteTask, updateTodolistTitle})(TodoList);\nexport default ConnectedTodolist;\n\n","import React from 'react';\nimport './App.css';\nimport TodoList from \"./components/todolist/TodoList\";\nimport AddNewItemForm from \"./components/addNewItemForm/AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {addTodolist, setTodolists} from \"./redux/reducer\";\n\nclass App extends React.Component {\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    restoreState = () => {\n        this.props.setTodolists()\n    };\n\n    addTodoList = (title) => {\n       this.props.addTodolist(title)\n    };\n\n    render = () => {\n        const todolists = this.props.todolists.map(tl => {\n            return <TodoList key={tl.id}\n                             id={tl.id}\n                             title={tl.title}\n                             tasks={tl.tasks}/>\n        });\n\n        return (\n            <>\n                <div>\n                    <AddNewItemForm addItem={this.addTodoList}/>\n                </div>\n                <div className=\"App\">\n                    {todolists}\n                </div>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        todolists: state.todolists\n    }\n};\n\n\nconst ConnectedApp = connect(mapStateToProps, {setTodolists, addTodolist})(App);\nexport default ConnectedApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nwindow.store = store;\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./redux/store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"AddNewItemForm_wrapper__1W6eo\",\"newTodolist\":\"AddNewItemForm_newTodolist__7NZff\",\"classNameForInput\":\"AddNewItemForm_classNameForInput__1IrBN\",\"buttonsColl\":\"AddNewItemForm_buttonsColl__3DUE7\",\"customBtn\":\"AddNewItemForm_customBtn__c_Buk\",\"btn9\":\"AddNewItemForm_btn9__15sAy\"};"],"sourceRoot":""}